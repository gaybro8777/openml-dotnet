using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using OpenML.Utilities;

namespace OpenML.Response
{
    /// <summary>
    /// Description of OpenMl dataset
    /// </summary>
    public class DatasetDescription
    {
        /// <summary>
        /// ID autogenerated by the server. Integer. Added by the server. Ignored when uploaded manually.
        /// </summary>
        public int Id { get; set; }

        /// <summary>
        /// Name given to the dataset
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Version of this dataset. '1' for original version. Auto-incremented by server.
        /// </summary>
        public int Version { get; set; }

        /// <summary>
        /// Description of the dataset, given by the user who uploaded it.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Format of the dataset (e.g. arff)
        /// </summary>
        public string Format { get; set; }

        /// <summary>
        /// The person who created the dataset
        /// </summary>
        public List<string> Creators { get; set; }

        /// <summary>
        ///People who contributed to the current version of the datadat (e.g. reformatting) 
        /// </summary>
        public List<string> Contributors { get; set; }

        /// <summary>
        /// Language in which the data is represented. Starts with 1 upper case letter, rest lower case, e.g. 'English' 
        /// </summary>
        public string Language { get; set; }

        /// <summary>
        /// The date the data was originally collected, given by the uploader 
        /// </summary>
        public string CollectionDate { get; set; }

        /// <summary>
        /// The date-time, generated by server, on which the dataset was uploaded. 
        /// </summary>
        public string UploadDate { get; set; }

        /// <summary>
        /// Licence of the data. If null, means: Public Domain or "dont know / care
        /// </summary>
        public string Licence { get; set; }

        /// <summary>
        /// Valid URL, points to actual data file, on the OpenML server or another dataset repository. If not present, it will be added by the server.
        /// </summary>
        public string Url { get; set; }

        /// <summary>
        /// MD5 checksum to check if the dataset is downloaded without corruption. 
        /// </summary>
        public string Md5CheckSum { get; set; }

        /// <summary>
        /// Version label provided by user, something relevant to the user. Can also be a date, hash, or some other type of id.
        /// </summary>
        public string VersionLabel { get; set; }

        /// <summary>
        /// Tags, describing the algorithms
        /// </summary>
        public List<string> Tags { get; set; }

        /// <summary>
        /// Who can see the dataset. Typical values: 'Everyone','All my friends','Only me'. Can also be any of the user's circles
        /// </summary>
        public string Visibility { get; set; }

        /// <summary>
        /// The default target attribute, if it exists. Can also have multiple values (comma-separated). Of course, tasks can be defined that use another attribute as target
        /// </summary>
        public string DefaultTargetAttribute { get; set; }

        public string Status { get; set; }

        /// <summary>
        /// For derived data, the url to the original dataset. This can be an OpenML dataset, e.g. 'http://openml.org/d/1'.
        /// </summary>
        public string OriginalDataUrl { get; set; }

        /// <summary>
        /// The attribute that represents the row-id column, if present in the dataset. If not set, the tool should create a string rowid from 0 to (n.obs - 1). This is what is then used in the data splits object. If set, it should of course be excluded in modeling
        /// </summary>
        public string RowIdAttribute { get; set; }

        /// <summary>
        /// Attributes that should be excluded in modelling, such as identifiers and indexes.
        /// </summary>
        public List<string> IgnoreAttributes { get; set; }

        /// <summary>
        /// Reference(s) that should be cited when building on this data
        /// </summary>
        public string Citation { get; set; }

        /// <summary>
        /// Link to a paper describing the dataset 
        /// </summary>
        public string PaperUrl { get; set; }

        /// <summary>
        /// When the dataset is updated, add an explanation here.
        /// </summary>
        public string UpdateComment { get; set; }

        /// <summary>
        /// Download dataset from its URL and verifies the MD5 hash. If the file is corrupted it is deleted
        /// and an exception is raised.
        /// </summary>
        /// <param name="destination"></param>
        public void DownloadDataset(string destination)
        {
            using (var webClient = new WebClient())
            {
                webClient.DownloadFile(Url, destination);
            }
            if (!Md5Utils.HasFileCorrectHash(destination, Md5CheckSum))
            {
                File.Delete(destination);
                throw new Exception("Md5 hash did not match. Source Corrupted?");
            }
        }
    }
}
    